import React, { useState } from 'react';
import { 
  View, 
  Text, 
  ScrollView, 
  SafeAreaView, 
  StyleSheet, 
  Alert,
  Share 
} from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { router, useLocalSearchParams } from 'expo-router';
import Animated, { 
  useSharedValue, 
  useAnimatedStyle, 
  withTiming, 
  withSpring 
} from 'react-native-reanimated';
import BennyMascot from '@/components/benny-mascot';
import LargeButton from '@/components/large-button';
import ResultCard from '@/components/result-card';
import { Colors } from '@/constants/theme';

export default function Results() {
  const { resultId, imageUrl } = useLocalSearchParams<{ 
    resultId: string; 
    imageUrl: string; 
  }>();
  
  const [isSharing, setIsSharing] = useState(false);

  const opacity = useSharedValue(0);
  const translateY = useSharedValue(30);

  // Mock results data - in real app, this would come from your backend
  const mockResults = {
    test_date: new Date(),
    overall_status: 'great' as const,
    protein_level: 'Normal',
    blood_level: 'Normal', 
    glucose_level: 'Normal',
    protein_value: 'Negative',
    blood_value: 'Negative',
    glucose_value: 'Negative',
    notes: 'All test results are within normal ranges. Your kidney health looks great!'
  };

  React.useEffect(() => {
    opacity.value = withTiming(1, { duration: 800 });
    translateY.value = withSpring(0, { damping: 15 });
  }, []);

  const animatedStyle = useAnimatedStyle(() => ({
    opacity: opacity.value,
    transform: [{ translateY: translateY.value }],
  }));

  const handleShareWithDoctor = async () => {
    setIsSharing(true);
    
    const shareText = `Kidney Health Test Results - ${mockResults.test_date.toLocaleDateString()}

üìä Test Results:
‚Ä¢ Protein Level: ${mockResults.protein_level} (${mockResults.protein_value})
‚Ä¢ Blood Level: ${mockResults.blood_level} (${mockResults.blood_value})
‚Ä¢ Glucose Level: ${mockResults.glucose_level} (${mockResults.glucose_value})

Overall Status: ${mockResults.overall_status === 'great' ? '‚úÖ Looking Great' : 
                 mockResults.overall_status === 'keep_watching' ? '‚ö†Ô∏è Keep Watching' : 
                 'üìû Call Doctor'}

Notes: ${mockResults.notes}

Generated by REACT Kidney Health App`;

    try {
      await Share.share({
        message: shareText,
        title: 'Kidney Health Test Results',
      });
    } catch (error) {
      Alert.alert('Share Error', 'Unable to share results.');
    } finally {
      setIsSharing(false);
    }
  };

  const handleTakeAnotherTest = () => {
    router.push('/camera');
  };

  const handleViewHistory = () => {
    router.push('/(tabs)/explore');
  };

  const handleGoHome = () => {
    router.push('/(tabs)');
  };

  const getOverallMessage = () => {
    if (mockResults.overall_status === 'great') {
      return "Excellent! Your kidney health looks great.";
    } else if (mockResults.overall_status === 'keep_watching') {
      return "Keep monitoring your health and stay hydrated.";
    } else if (mockResults.overall_status === 'call_doctor') {
      return "Please consult with your healthcare provider.";
    } else {
      return "Results are ready for review.";
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="dark" />
      
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        <Animated.View style={[styles.content, animatedStyle]}>
          <BennyMascot 
            expression={mockResults.overall_status === 'great' ? 'celebrating' : 
                       mockResults.overall_status === 'keep_watching' ? 'encouraging' : 
                       'thinking'} 
            size="large" 
            message={getOverallMessage()} 
            showMessage={true} 
          />
          
          <Text style={styles.title}>Your Test Results</Text>
          <Text style={styles.subtitle}>
            Test completed on {mockResults.test_date.toLocaleDateString('en-US', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </Text>

          <View style={styles.resultsContainer}>
            <ResultCard
              title="Overall Status"
              level={mockResults.overall_status === 'great' ? 'Great' : 
                     mockResults.overall_status === 'keep_watching' ? 'Monitor' : 
                     'Consult Doctor'}
              status={mockResults.overall_status}
              description="Based on all test parameters"
              index={0}
            />

            <ResultCard
              title="Protein Level"
              level={mockResults.protein_value}
              status={mockResults.protein_level === 'Normal' ? 'great' : 
                     mockResults.protein_level === 'Trace' ? 'keep_watching' : 
                     'call_doctor'}
              description="Protein in urine can indicate kidney issues"
              index={1}
            />

            <ResultCard
              title="Blood Level"
              level={mockResults.blood_value}
              status={mockResults.blood_level === 'Normal' ? 'great' : 
                     mockResults.blood_level === 'Trace' ? 'keep_watching' : 
                     'call_doctor'}
              description="Blood in urine needs attention"
              index={2}
            />

            <ResultCard
              title="Glucose Level"
              level={mockResults.glucose_value}
              status={mockResults.glucose_level === 'Normal' ? 'great' : 
                     mockResults.glucose_level === 'Trace' ? 'keep_watching' : 
                     'call_doctor'}
              description="High glucose may indicate diabetes"
              index={3}
            />
          </View>

          <View style={styles.notesContainer}>
            <Text style={styles.notesTitle}>üìù Additional Notes</Text>
            <Text style={styles.notesText}>{mockResults.notes}</Text>
          </View>

          <View style={styles.actionsContainer}>
            <LargeButton 
              onPress={handleShareWithDoctor} 
              variant="success" 
              size="large" 
              icon="üì§"
              disabled={isSharing}
            >
              {isSharing ? 'Sharing...' : 'Share with Doctor'}
            </LargeButton>
            
            <LargeButton 
              onPress={handleTakeAnotherTest} 
              variant="primary" 
              size="large" 
              icon="üì∑"
            >
              Take Another Test
            </LargeButton>
            
            <LargeButton 
              onPress={handleViewHistory} 
              variant="outline" 
              size="medium" 
              icon="üìä"
            >
              View History
            </LargeButton>
            
            <LargeButton 
              onPress={handleGoHome} 
              variant="outline" 
              size="medium" 
              icon="üè†"
            >
              Go Home
            </LargeButton>
          </View>

          <View style={styles.recommendationsContainer}>
            <Text style={styles.recommendationsTitle}>üí° Recommendations</Text>
            <View style={styles.recommendationCard}>
              <Text style={styles.recommendationText}>
                ‚Ä¢ Continue regular testing every 2-3 weeks
              </Text>
            </View>
            <View style={styles.recommendationCard}>
              <Text style={styles.recommendationText}>
                ‚Ä¢ Stay well hydrated throughout the day
              </Text>
            </View>
            <View style={styles.recommendationCard}>
              <Text style={styles.recommendationText}>
                ‚Ä¢ Maintain a balanced diet with limited salt
              </Text>
            </View>
          </View>
        </Animated.View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.light.cream,
  },
  scrollView: {
    flex: 1,
  },
  content: {
    flex: 1,
    alignItems: 'center',
    paddingHorizontal: 24,
    paddingTop: 20,
    paddingBottom: 40,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: Colors.light.gray[800],
    textAlign: 'center',
    marginBottom: 12,
    marginTop: 24,
  },
  subtitle: {
    fontSize: 16,
    color: Colors.light.gray[600],
    textAlign: 'center',
    marginBottom: 32,
    lineHeight: 22,
  },
  resultsContainer: {
    width: '100%',
    marginBottom: 32,
  },
  notesContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    borderWidth: 2,
    borderColor: Colors.light.gentleBlue,
    width: '100%',
    marginBottom: 32,
  },
  notesTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: Colors.light.gray[800],
    marginBottom: 12,
    textAlign: 'center',
  },
  notesText: {
    fontSize: 16,
    color: Colors.light.gray[600],
    lineHeight: 24,
    textAlign: 'center',
  },
  actionsContainer: {
    width: '100%',
    gap: 16,
    marginBottom: 32,
  },
  recommendationsContainer: {
    width: '100%',
  },
  recommendationsTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: Colors.light.gray[800],
    marginBottom: 16,
    textAlign: 'center',
  },
  recommendationCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: Colors.light.sunshine,
  },
  recommendationText: {
    fontSize: 16,
    color: Colors.light.gray[800],
    lineHeight: 22,
  },
});
